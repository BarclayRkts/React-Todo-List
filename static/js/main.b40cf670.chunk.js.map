{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","handleRemove","bind","this","removeTodo","id","task","className","onClick","Component","NewTodoForm","state","handleChange","handleSubmit","evt","setState","target","name","value","preventDefault","createTodo","uuidv4","onSubmit","htmlFor","type","placeholder","onChange","TodoList","todos","create","remove","newTodo","filter","t","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gVAqBeA,G,wDAjBX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFN,E,2DAKdC,KAAKH,MAAMI,WAAWD,KAAKH,MAAMK,M,+BAGjC,OACI,6BACI,4BAAKF,KAAKH,MAAMM,MAChB,4BAAQC,UAAU,MAAMC,QAASL,KAAKF,cAAtC,e,GAZGQ,c,sBCmCJC,G,wDAjCX,WAAYV,GAAO,IAAD,8BACd,cAAMA,IACDW,MAAQ,CAACL,KAAM,IACpB,EAAKM,aAAe,EAAKA,aAAaV,KAAlB,gBACpB,EAAKW,aAAe,EAAKA,aAAaX,KAAlB,gBAJN,E,yDAMLY,GACTX,KAAKY,SAAL,eACKD,EAAIE,OAAOC,KAAQH,EAAIE,OAAOE,U,mCAG1BJ,GACTA,EAAIK,iBACJhB,KAAKH,MAAMoB,WAAX,2BAA0BjB,KAAKQ,OAA/B,IAAsCN,GAAIgB,iBAC1ClB,KAAKY,SAAS,CAACT,KAAM,O,+BAGrB,OACI,0BAAMgB,SAAUnB,KAAKU,cACjB,2BAAOU,QAAQ,QAAf,YACA,2BACAC,KAAK,OACLC,YAAY,WACZpB,GAAG,OACHY,KAAK,OACLC,MAAOf,KAAKQ,MAAML,KAClBoB,SAAUvB,KAAKS,eAEf,iD,GA7BUH,cCsCXkB,G,wDApCX,WAAY3B,GAAO,IAAD,8BACd,cAAMA,IACDW,MAAQ,CACTiB,MAAO,IAEX,EAAKC,OAAS,EAAKA,OAAO3B,KAAZ,gBACd,EAAK4B,OAAS,EAAKA,OAAO5B,KAAZ,gBANA,E,mDAQX6B,GACH5B,KAAKY,SAAS,CACVa,MAAM,GAAD,mBAAMzB,KAAKQ,MAAMiB,OAAjB,CAAwBG,Q,6BAG9B1B,GACHF,KAAKY,SAAS,CACVa,MAAOzB,KAAKQ,MAAMiB,MAAMI,QAAO,SAAAC,GAAC,OAAIA,EAAE5B,KAAOA,S,+BAG5C,IAAD,OACEuB,EAAQzB,KAAKQ,MAAMiB,MAAMM,KAAI,SAAAC,GAC/B,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAK9B,GAAIA,GAAI8B,EAAK9B,GAAIC,KAAM6B,EAAK7B,KAAMF,WAAY,EAAK0B,YAG3E,OACI,yBAAKvB,UAAU,YACX,yCACA,kBAAC,EAAD,CAAaa,WAAYjB,KAAK0B,SAC9B,4BACKD,Q,GA9BEnB,c,MCOR4B,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b40cf670.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Todo.css';\r\n\r\nclass Todo extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.handleRemove = this.handleRemove.bind(this);\r\n    }\r\n    handleRemove(){\r\n        this.props.removeTodo(this.props.id)\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <li>{this.props.task}</li>\r\n                <button className='btn' onClick={this.handleRemove}>Delete</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todo;","import React, { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './NewTodoForm.css';\r\n\r\nclass NewTodoForm extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {task: ''}\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    handleChange(evt){\r\n        this.setState({\r\n            [evt.target.name] : evt.target.value\r\n        })\r\n    }\r\n    handleSubmit(evt){\r\n        evt.preventDefault();\r\n        this.props.createTodo({...this.state, id: uuidv4() });\r\n        this.setState({task: ''})\r\n    }\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.handleSubmit}>\r\n                <label htmlFor='task'>New Todo</label>\r\n                <input \r\n                type='text' \r\n                placeholder='New Todo' \r\n                id='task'\r\n                name='task'\r\n                value={this.state.task}\r\n                onChange={this.handleChange}\r\n                />\r\n                <button>Add Todo</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default NewTodoForm;","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\nimport NewTodoForm from './NewTodoForm';\r\nimport './TodoList.css'\r\n\r\nclass TodoList extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            todos: []\r\n        };\r\n        this.create = this.create.bind(this);\r\n        this.remove = this.remove.bind(this);\r\n    }\r\n    create(newTodo){\r\n        this.setState({\r\n            todos: [...this.state.todos, newTodo]\r\n        })\r\n    }\r\n    remove(id){\r\n        this.setState({\r\n            todos: this.state.todos.filter(t => t.id !== id)\r\n        });\r\n    }\r\n    render(){\r\n        const todos = this.state.todos.map(todo => {\r\n            return (\r\n                <Todo key={todo.id} id={todo.id} task={todo.task} removeTodo={this.remove}/>\r\n            )\r\n        });\r\n        return (\r\n            <div className='TodoList'>\r\n                <h1>Todo List</h1>\r\n                <NewTodoForm createTodo={this.create}/>\r\n                <ul>\r\n                    {todos}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport TodoList from './TodoList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}